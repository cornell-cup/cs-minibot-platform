// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `CommModule.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package CommModule;

public abstract class _SensorInterfaceDisp extends Ice.ObjectImpl implements SensorInterface
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::CommModule::SensorInterface",
        "::Ice::Object"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[0];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[0];
    }

    public static String ice_staticId()
    {
        return __ids[0];
    }

    public final void initializeBot(int botnum)
    {
        initializeBot(botnum, null);
    }

    public final void pokeBase(int botnum)
    {
        pokeBase(botnum, null);
    }

    public final void sendHallSensorData(int botnum, float frontLeft, float frontRight, float backLeft, float backRight)
    {
        sendHallSensorData(botnum, frontLeft, frontRight, backLeft, backRight, null);
    }

    public final void sendImuData(int botnum, float yaw, float pitch, float roll, float ax, float ay, float az)
    {
        sendImuData(botnum, yaw, pitch, roll, ax, ay, az, null);
    }

    public final void sendLaserTagData(int botnum, String laserTagDataType, int hitCount)
    {
        sendLaserTagData(botnum, laserTagDataType, hitCount, null);
    }

    public final void sendStreamingVideoData(int botnum, byte[] bytes, int cameraID, int numObjectsDetected, ImgProcData[] imgProcseq)
    {
        sendStreamingVideoData(botnum, bytes, cameraID, numObjectsDetected, imgProcseq, null);
    }

    public static Ice.DispatchStatus ___initializeBot(SensorInterface __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int botnum;
        botnum = __is.readInt();
        __inS.endReadParams();
        __obj.initializeBot(botnum, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___sendLaserTagData(SensorInterface __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int botnum;
        String laserTagDataType;
        int hitCount;
        botnum = __is.readInt();
        laserTagDataType = __is.readString();
        hitCount = __is.readInt();
        __inS.endReadParams();
        __obj.sendLaserTagData(botnum, laserTagDataType, hitCount, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___sendStreamingVideoData(SensorInterface __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int botnum;
        byte[] bytes;
        int cameraID;
        int numObjectsDetected;
        ImgProcData[] imgProcseq;
        botnum = __is.readInt();
        bytes = ByteSeqHelper.read(__is);
        cameraID = __is.readInt();
        numObjectsDetected = __is.readInt();
        imgProcseq = ImgProcDataSeqHelper.read(__is);
        __inS.endReadParams();
        __obj.sendStreamingVideoData(botnum, bytes, cameraID, numObjectsDetected, imgProcseq, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___pokeBase(SensorInterface __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int botnum;
        botnum = __is.readInt();
        __inS.endReadParams();
        __obj.pokeBase(botnum, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___sendHallSensorData(SensorInterface __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int botnum;
        float frontLeft;
        float frontRight;
        float backLeft;
        float backRight;
        botnum = __is.readInt();
        frontLeft = __is.readFloat();
        frontRight = __is.readFloat();
        backLeft = __is.readFloat();
        backRight = __is.readFloat();
        __inS.endReadParams();
        __obj.sendHallSensorData(botnum, frontLeft, frontRight, backLeft, backRight, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___sendImuData(SensorInterface __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int botnum;
        float yaw;
        float pitch;
        float roll;
        float ax;
        float ay;
        float az;
        botnum = __is.readInt();
        yaw = __is.readFloat();
        pitch = __is.readFloat();
        roll = __is.readFloat();
        ax = __is.readFloat();
        ay = __is.readFloat();
        az = __is.readFloat();
        __inS.endReadParams();
        __obj.sendImuData(botnum, yaw, pitch, roll, ax, ay, az, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    private final static String[] __all =
    {
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "initializeBot",
        "pokeBase",
        "sendHallSensorData",
        "sendImuData",
        "sendLaserTagData",
        "sendStreamingVideoData"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___ice_id(this, in, __current);
            }
            case 1:
            {
                return ___ice_ids(this, in, __current);
            }
            case 2:
            {
                return ___ice_isA(this, in, __current);
            }
            case 3:
            {
                return ___ice_ping(this, in, __current);
            }
            case 4:
            {
                return ___initializeBot(this, in, __current);
            }
            case 5:
            {
                return ___pokeBase(this, in, __current);
            }
            case 6:
            {
                return ___sendHallSensorData(this, in, __current);
            }
            case 7:
            {
                return ___sendImuData(this, in, __current);
            }
            case 8:
            {
                return ___sendLaserTagData(this, in, __current);
            }
            case 9:
            {
                return ___sendStreamingVideoData(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
