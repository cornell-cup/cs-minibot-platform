// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `CommModule.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package CommModule;

/**
 * Provides type-specific helper functions.
 **/
public final class SensorInterfacePrxHelper extends Ice.ObjectPrxHelperBase implements SensorInterfacePrx
{
    private static final String __initializeBot_name = "initializeBot";

    public void initializeBot(int botnum)
    {
        initializeBot(botnum, null, false);
    }

    public void initializeBot(int botnum, java.util.Map<String, String> __ctx)
    {
        initializeBot(botnum, __ctx, true);
    }

    private void initializeBot(int botnum, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        end_initializeBot(begin_initializeBot(botnum, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_initializeBot(int botnum)
    {
        return begin_initializeBot(botnum, null, false, false, null);
    }

    public Ice.AsyncResult begin_initializeBot(int botnum, java.util.Map<String, String> __ctx)
    {
        return begin_initializeBot(botnum, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_initializeBot(int botnum, Ice.Callback __cb)
    {
        return begin_initializeBot(botnum, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_initializeBot(int botnum, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_initializeBot(botnum, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_initializeBot(int botnum, Callback_SensorInterface_initializeBot __cb)
    {
        return begin_initializeBot(botnum, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_initializeBot(int botnum, java.util.Map<String, String> __ctx, Callback_SensorInterface_initializeBot __cb)
    {
        return begin_initializeBot(botnum, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_initializeBot(int botnum,
                                               IceInternal.Functional_VoidCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_initializeBot(botnum, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_initializeBot(int botnum,
                                               IceInternal.Functional_VoidCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_initializeBot(botnum, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_initializeBot(int botnum,
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_VoidCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_initializeBot(botnum, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_initializeBot(int botnum,
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_VoidCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_initializeBot(botnum, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_initializeBot(int botnum, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.Functional_VoidCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_initializeBot(botnum, 
                                   __ctx, 
                                   __explicitCtx, 
                                   __synchronous, 
                                   new IceInternal.Functional_OnewayCallback(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_initializeBot(int botnum, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__initializeBot_name, __cb);
        try
        {
            __result.prepare(__initializeBot_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(botnum);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_initializeBot(Ice.AsyncResult __iresult)
    {
        __end(__iresult, __initializeBot_name);
    }

    private static final String __pokeBase_name = "pokeBase";

    public void pokeBase(int botnum)
    {
        pokeBase(botnum, null, false);
    }

    public void pokeBase(int botnum, java.util.Map<String, String> __ctx)
    {
        pokeBase(botnum, __ctx, true);
    }

    private void pokeBase(int botnum, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        end_pokeBase(begin_pokeBase(botnum, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_pokeBase(int botnum)
    {
        return begin_pokeBase(botnum, null, false, false, null);
    }

    public Ice.AsyncResult begin_pokeBase(int botnum, java.util.Map<String, String> __ctx)
    {
        return begin_pokeBase(botnum, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_pokeBase(int botnum, Ice.Callback __cb)
    {
        return begin_pokeBase(botnum, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_pokeBase(int botnum, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_pokeBase(botnum, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_pokeBase(int botnum, Callback_SensorInterface_pokeBase __cb)
    {
        return begin_pokeBase(botnum, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_pokeBase(int botnum, java.util.Map<String, String> __ctx, Callback_SensorInterface_pokeBase __cb)
    {
        return begin_pokeBase(botnum, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_pokeBase(int botnum,
                                          IceInternal.Functional_VoidCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_pokeBase(botnum, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_pokeBase(int botnum,
                                          IceInternal.Functional_VoidCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_pokeBase(botnum, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_pokeBase(int botnum,
                                          java.util.Map<String, String> __ctx, 
                                          IceInternal.Functional_VoidCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_pokeBase(botnum, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_pokeBase(int botnum,
                                          java.util.Map<String, String> __ctx, 
                                          IceInternal.Functional_VoidCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_pokeBase(botnum, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_pokeBase(int botnum, 
                                           java.util.Map<String, String> __ctx, 
                                           boolean __explicitCtx, 
                                           boolean __synchronous, 
                                           IceInternal.Functional_VoidCallback __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_pokeBase(botnum, 
                              __ctx, 
                              __explicitCtx, 
                              __synchronous, 
                              new IceInternal.Functional_OnewayCallback(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_pokeBase(int botnum, 
                                           java.util.Map<String, String> __ctx, 
                                           boolean __explicitCtx, 
                                           boolean __synchronous, 
                                           IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__pokeBase_name, __cb);
        try
        {
            __result.prepare(__pokeBase_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(botnum);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_pokeBase(Ice.AsyncResult __iresult)
    {
        __end(__iresult, __pokeBase_name);
    }

    private static final String __sendHallSensorData_name = "sendHallSensorData";

    public void sendHallSensorData(int botnum, float frontLeft, float frontRight, float backLeft, float backRight)
    {
        sendHallSensorData(botnum, frontLeft, frontRight, backLeft, backRight, null, false);
    }

    public void sendHallSensorData(int botnum, float frontLeft, float frontRight, float backLeft, float backRight, java.util.Map<String, String> __ctx)
    {
        sendHallSensorData(botnum, frontLeft, frontRight, backLeft, backRight, __ctx, true);
    }

    private void sendHallSensorData(int botnum, float frontLeft, float frontRight, float backLeft, float backRight, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        end_sendHallSensorData(begin_sendHallSensorData(botnum, frontLeft, frontRight, backLeft, backRight, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_sendHallSensorData(int botnum, float frontLeft, float frontRight, float backLeft, float backRight)
    {
        return begin_sendHallSensorData(botnum, frontLeft, frontRight, backLeft, backRight, null, false, false, null);
    }

    public Ice.AsyncResult begin_sendHallSensorData(int botnum, float frontLeft, float frontRight, float backLeft, float backRight, java.util.Map<String, String> __ctx)
    {
        return begin_sendHallSensorData(botnum, frontLeft, frontRight, backLeft, backRight, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_sendHallSensorData(int botnum, float frontLeft, float frontRight, float backLeft, float backRight, Ice.Callback __cb)
    {
        return begin_sendHallSensorData(botnum, frontLeft, frontRight, backLeft, backRight, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_sendHallSensorData(int botnum, float frontLeft, float frontRight, float backLeft, float backRight, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_sendHallSensorData(botnum, frontLeft, frontRight, backLeft, backRight, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_sendHallSensorData(int botnum, float frontLeft, float frontRight, float backLeft, float backRight, Callback_SensorInterface_sendHallSensorData __cb)
    {
        return begin_sendHallSensorData(botnum, frontLeft, frontRight, backLeft, backRight, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_sendHallSensorData(int botnum, float frontLeft, float frontRight, float backLeft, float backRight, java.util.Map<String, String> __ctx, Callback_SensorInterface_sendHallSensorData __cb)
    {
        return begin_sendHallSensorData(botnum, frontLeft, frontRight, backLeft, backRight, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_sendHallSensorData(int botnum,
                                                    float frontLeft, 
                                                    float frontRight, 
                                                    float backLeft, 
                                                    float backRight, 
                                                    IceInternal.Functional_VoidCallback __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_sendHallSensorData(botnum, frontLeft, frontRight, backLeft, backRight, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_sendHallSensorData(int botnum,
                                                    float frontLeft, 
                                                    float frontRight, 
                                                    float backLeft, 
                                                    float backRight, 
                                                    IceInternal.Functional_VoidCallback __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_sendHallSensorData(botnum, frontLeft, frontRight, backLeft, backRight, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_sendHallSensorData(int botnum,
                                                    float frontLeft, 
                                                    float frontRight, 
                                                    float backLeft, 
                                                    float backRight, 
                                                    java.util.Map<String, String> __ctx, 
                                                    IceInternal.Functional_VoidCallback __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_sendHallSensorData(botnum, frontLeft, frontRight, backLeft, backRight, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_sendHallSensorData(int botnum,
                                                    float frontLeft, 
                                                    float frontRight, 
                                                    float backLeft, 
                                                    float backRight, 
                                                    java.util.Map<String, String> __ctx, 
                                                    IceInternal.Functional_VoidCallback __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_sendHallSensorData(botnum, frontLeft, frontRight, backLeft, backRight, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_sendHallSensorData(int botnum, 
                                                     float frontLeft, 
                                                     float frontRight, 
                                                     float backLeft, 
                                                     float backRight, 
                                                     java.util.Map<String, String> __ctx, 
                                                     boolean __explicitCtx, 
                                                     boolean __synchronous, 
                                                     IceInternal.Functional_VoidCallback __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                     IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_sendHallSensorData(botnum, 
                                        frontLeft, 
                                        frontRight, 
                                        backLeft, 
                                        backRight, 
                                        __ctx, 
                                        __explicitCtx, 
                                        __synchronous, 
                                        new IceInternal.Functional_OnewayCallback(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_sendHallSensorData(int botnum, 
                                                     float frontLeft, 
                                                     float frontRight, 
                                                     float backLeft, 
                                                     float backRight, 
                                                     java.util.Map<String, String> __ctx, 
                                                     boolean __explicitCtx, 
                                                     boolean __synchronous, 
                                                     IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__sendHallSensorData_name, __cb);
        try
        {
            __result.prepare(__sendHallSensorData_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(botnum);
            __os.writeFloat(frontLeft);
            __os.writeFloat(frontRight);
            __os.writeFloat(backLeft);
            __os.writeFloat(backRight);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_sendHallSensorData(Ice.AsyncResult __iresult)
    {
        __end(__iresult, __sendHallSensorData_name);
    }

    private static final String __sendImuData_name = "sendImuData";

    public void sendImuData(int botnum, float yaw, float pitch, float roll, float ax, float ay, float az)
    {
        sendImuData(botnum, yaw, pitch, roll, ax, ay, az, null, false);
    }

    public void sendImuData(int botnum, float yaw, float pitch, float roll, float ax, float ay, float az, java.util.Map<String, String> __ctx)
    {
        sendImuData(botnum, yaw, pitch, roll, ax, ay, az, __ctx, true);
    }

    private void sendImuData(int botnum, float yaw, float pitch, float roll, float ax, float ay, float az, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        end_sendImuData(begin_sendImuData(botnum, yaw, pitch, roll, ax, ay, az, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_sendImuData(int botnum, float yaw, float pitch, float roll, float ax, float ay, float az)
    {
        return begin_sendImuData(botnum, yaw, pitch, roll, ax, ay, az, null, false, false, null);
    }

    public Ice.AsyncResult begin_sendImuData(int botnum, float yaw, float pitch, float roll, float ax, float ay, float az, java.util.Map<String, String> __ctx)
    {
        return begin_sendImuData(botnum, yaw, pitch, roll, ax, ay, az, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_sendImuData(int botnum, float yaw, float pitch, float roll, float ax, float ay, float az, Ice.Callback __cb)
    {
        return begin_sendImuData(botnum, yaw, pitch, roll, ax, ay, az, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_sendImuData(int botnum, float yaw, float pitch, float roll, float ax, float ay, float az, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_sendImuData(botnum, yaw, pitch, roll, ax, ay, az, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_sendImuData(int botnum, float yaw, float pitch, float roll, float ax, float ay, float az, Callback_SensorInterface_sendImuData __cb)
    {
        return begin_sendImuData(botnum, yaw, pitch, roll, ax, ay, az, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_sendImuData(int botnum, float yaw, float pitch, float roll, float ax, float ay, float az, java.util.Map<String, String> __ctx, Callback_SensorInterface_sendImuData __cb)
    {
        return begin_sendImuData(botnum, yaw, pitch, roll, ax, ay, az, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_sendImuData(int botnum,
                                             float yaw, 
                                             float pitch, 
                                             float roll, 
                                             float ax, 
                                             float ay, 
                                             float az, 
                                             IceInternal.Functional_VoidCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_sendImuData(botnum, yaw, pitch, roll, ax, ay, az, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_sendImuData(int botnum,
                                             float yaw, 
                                             float pitch, 
                                             float roll, 
                                             float ax, 
                                             float ay, 
                                             float az, 
                                             IceInternal.Functional_VoidCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_sendImuData(botnum, yaw, pitch, roll, ax, ay, az, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_sendImuData(int botnum,
                                             float yaw, 
                                             float pitch, 
                                             float roll, 
                                             float ax, 
                                             float ay, 
                                             float az, 
                                             java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_VoidCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_sendImuData(botnum, yaw, pitch, roll, ax, ay, az, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_sendImuData(int botnum,
                                             float yaw, 
                                             float pitch, 
                                             float roll, 
                                             float ax, 
                                             float ay, 
                                             float az, 
                                             java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_VoidCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_sendImuData(botnum, yaw, pitch, roll, ax, ay, az, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_sendImuData(int botnum, 
                                              float yaw, 
                                              float pitch, 
                                              float roll, 
                                              float ax, 
                                              float ay, 
                                              float az, 
                                              java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.Functional_VoidCallback __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_sendImuData(botnum, 
                                 yaw, 
                                 pitch, 
                                 roll, 
                                 ax, 
                                 ay, 
                                 az, 
                                 __ctx, 
                                 __explicitCtx, 
                                 __synchronous, 
                                 new IceInternal.Functional_OnewayCallback(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_sendImuData(int botnum, 
                                              float yaw, 
                                              float pitch, 
                                              float roll, 
                                              float ax, 
                                              float ay, 
                                              float az, 
                                              java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__sendImuData_name, __cb);
        try
        {
            __result.prepare(__sendImuData_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(botnum);
            __os.writeFloat(yaw);
            __os.writeFloat(pitch);
            __os.writeFloat(roll);
            __os.writeFloat(ax);
            __os.writeFloat(ay);
            __os.writeFloat(az);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_sendImuData(Ice.AsyncResult __iresult)
    {
        __end(__iresult, __sendImuData_name);
    }

    private static final String __sendLaserTagData_name = "sendLaserTagData";

    public void sendLaserTagData(int botnum, String laserTagDataType, int hitCount)
    {
        sendLaserTagData(botnum, laserTagDataType, hitCount, null, false);
    }

    public void sendLaserTagData(int botnum, String laserTagDataType, int hitCount, java.util.Map<String, String> __ctx)
    {
        sendLaserTagData(botnum, laserTagDataType, hitCount, __ctx, true);
    }

    private void sendLaserTagData(int botnum, String laserTagDataType, int hitCount, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        end_sendLaserTagData(begin_sendLaserTagData(botnum, laserTagDataType, hitCount, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_sendLaserTagData(int botnum, String laserTagDataType, int hitCount)
    {
        return begin_sendLaserTagData(botnum, laserTagDataType, hitCount, null, false, false, null);
    }

    public Ice.AsyncResult begin_sendLaserTagData(int botnum, String laserTagDataType, int hitCount, java.util.Map<String, String> __ctx)
    {
        return begin_sendLaserTagData(botnum, laserTagDataType, hitCount, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_sendLaserTagData(int botnum, String laserTagDataType, int hitCount, Ice.Callback __cb)
    {
        return begin_sendLaserTagData(botnum, laserTagDataType, hitCount, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_sendLaserTagData(int botnum, String laserTagDataType, int hitCount, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_sendLaserTagData(botnum, laserTagDataType, hitCount, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_sendLaserTagData(int botnum, String laserTagDataType, int hitCount, Callback_SensorInterface_sendLaserTagData __cb)
    {
        return begin_sendLaserTagData(botnum, laserTagDataType, hitCount, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_sendLaserTagData(int botnum, String laserTagDataType, int hitCount, java.util.Map<String, String> __ctx, Callback_SensorInterface_sendLaserTagData __cb)
    {
        return begin_sendLaserTagData(botnum, laserTagDataType, hitCount, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_sendLaserTagData(int botnum,
                                                  String laserTagDataType, 
                                                  int hitCount, 
                                                  IceInternal.Functional_VoidCallback __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_sendLaserTagData(botnum, laserTagDataType, hitCount, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_sendLaserTagData(int botnum,
                                                  String laserTagDataType, 
                                                  int hitCount, 
                                                  IceInternal.Functional_VoidCallback __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_sendLaserTagData(botnum, laserTagDataType, hitCount, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_sendLaserTagData(int botnum,
                                                  String laserTagDataType, 
                                                  int hitCount, 
                                                  java.util.Map<String, String> __ctx, 
                                                  IceInternal.Functional_VoidCallback __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_sendLaserTagData(botnum, laserTagDataType, hitCount, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_sendLaserTagData(int botnum,
                                                  String laserTagDataType, 
                                                  int hitCount, 
                                                  java.util.Map<String, String> __ctx, 
                                                  IceInternal.Functional_VoidCallback __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_sendLaserTagData(botnum, laserTagDataType, hitCount, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_sendLaserTagData(int botnum, 
                                                   String laserTagDataType, 
                                                   int hitCount, 
                                                   java.util.Map<String, String> __ctx, 
                                                   boolean __explicitCtx, 
                                                   boolean __synchronous, 
                                                   IceInternal.Functional_VoidCallback __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_sendLaserTagData(botnum, 
                                      laserTagDataType, 
                                      hitCount, 
                                      __ctx, 
                                      __explicitCtx, 
                                      __synchronous, 
                                      new IceInternal.Functional_OnewayCallback(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_sendLaserTagData(int botnum, 
                                                   String laserTagDataType, 
                                                   int hitCount, 
                                                   java.util.Map<String, String> __ctx, 
                                                   boolean __explicitCtx, 
                                                   boolean __synchronous, 
                                                   IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__sendLaserTagData_name, __cb);
        try
        {
            __result.prepare(__sendLaserTagData_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(botnum);
            __os.writeString(laserTagDataType);
            __os.writeInt(hitCount);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_sendLaserTagData(Ice.AsyncResult __iresult)
    {
        __end(__iresult, __sendLaserTagData_name);
    }

    private static final String __sendStreamingVideoData_name = "sendStreamingVideoData";

    public void sendStreamingVideoData(int botnum, byte[] bytes, int cameraID, int numObjectsDetected, ImgProcData[] imgProcseq)
    {
        sendStreamingVideoData(botnum, bytes, cameraID, numObjectsDetected, imgProcseq, null, false);
    }

    public void sendStreamingVideoData(int botnum, byte[] bytes, int cameraID, int numObjectsDetected, ImgProcData[] imgProcseq, java.util.Map<String, String> __ctx)
    {
        sendStreamingVideoData(botnum, bytes, cameraID, numObjectsDetected, imgProcseq, __ctx, true);
    }

    private void sendStreamingVideoData(int botnum, byte[] bytes, int cameraID, int numObjectsDetected, ImgProcData[] imgProcseq, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        end_sendStreamingVideoData(begin_sendStreamingVideoData(botnum, bytes, cameraID, numObjectsDetected, imgProcseq, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_sendStreamingVideoData(int botnum, byte[] bytes, int cameraID, int numObjectsDetected, ImgProcData[] imgProcseq)
    {
        return begin_sendStreamingVideoData(botnum, bytes, cameraID, numObjectsDetected, imgProcseq, null, false, false, null);
    }

    public Ice.AsyncResult begin_sendStreamingVideoData(int botnum, byte[] bytes, int cameraID, int numObjectsDetected, ImgProcData[] imgProcseq, java.util.Map<String, String> __ctx)
    {
        return begin_sendStreamingVideoData(botnum, bytes, cameraID, numObjectsDetected, imgProcseq, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_sendStreamingVideoData(int botnum, byte[] bytes, int cameraID, int numObjectsDetected, ImgProcData[] imgProcseq, Ice.Callback __cb)
    {
        return begin_sendStreamingVideoData(botnum, bytes, cameraID, numObjectsDetected, imgProcseq, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_sendStreamingVideoData(int botnum, byte[] bytes, int cameraID, int numObjectsDetected, ImgProcData[] imgProcseq, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_sendStreamingVideoData(botnum, bytes, cameraID, numObjectsDetected, imgProcseq, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_sendStreamingVideoData(int botnum, byte[] bytes, int cameraID, int numObjectsDetected, ImgProcData[] imgProcseq, Callback_SensorInterface_sendStreamingVideoData __cb)
    {
        return begin_sendStreamingVideoData(botnum, bytes, cameraID, numObjectsDetected, imgProcseq, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_sendStreamingVideoData(int botnum, byte[] bytes, int cameraID, int numObjectsDetected, ImgProcData[] imgProcseq, java.util.Map<String, String> __ctx, Callback_SensorInterface_sendStreamingVideoData __cb)
    {
        return begin_sendStreamingVideoData(botnum, bytes, cameraID, numObjectsDetected, imgProcseq, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_sendStreamingVideoData(int botnum,
                                                        byte[] bytes, 
                                                        int cameraID, 
                                                        int numObjectsDetected, 
                                                        ImgProcData[] imgProcseq, 
                                                        IceInternal.Functional_VoidCallback __responseCb, 
                                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_sendStreamingVideoData(botnum, bytes, cameraID, numObjectsDetected, imgProcseq, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_sendStreamingVideoData(int botnum,
                                                        byte[] bytes, 
                                                        int cameraID, 
                                                        int numObjectsDetected, 
                                                        ImgProcData[] imgProcseq, 
                                                        IceInternal.Functional_VoidCallback __responseCb, 
                                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_sendStreamingVideoData(botnum, bytes, cameraID, numObjectsDetected, imgProcseq, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_sendStreamingVideoData(int botnum,
                                                        byte[] bytes, 
                                                        int cameraID, 
                                                        int numObjectsDetected, 
                                                        ImgProcData[] imgProcseq, 
                                                        java.util.Map<String, String> __ctx, 
                                                        IceInternal.Functional_VoidCallback __responseCb, 
                                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_sendStreamingVideoData(botnum, bytes, cameraID, numObjectsDetected, imgProcseq, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_sendStreamingVideoData(int botnum,
                                                        byte[] bytes, 
                                                        int cameraID, 
                                                        int numObjectsDetected, 
                                                        ImgProcData[] imgProcseq, 
                                                        java.util.Map<String, String> __ctx, 
                                                        IceInternal.Functional_VoidCallback __responseCb, 
                                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_sendStreamingVideoData(botnum, bytes, cameraID, numObjectsDetected, imgProcseq, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_sendStreamingVideoData(int botnum, 
                                                         byte[] bytes, 
                                                         int cameraID, 
                                                         int numObjectsDetected, 
                                                         ImgProcData[] imgProcseq, 
                                                         java.util.Map<String, String> __ctx, 
                                                         boolean __explicitCtx, 
                                                         boolean __synchronous, 
                                                         IceInternal.Functional_VoidCallback __responseCb, 
                                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_sendStreamingVideoData(botnum, 
                                            bytes, 
                                            cameraID, 
                                            numObjectsDetected, 
                                            imgProcseq, 
                                            __ctx, 
                                            __explicitCtx, 
                                            __synchronous, 
                                            new IceInternal.Functional_OnewayCallback(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_sendStreamingVideoData(int botnum, 
                                                         byte[] bytes, 
                                                         int cameraID, 
                                                         int numObjectsDetected, 
                                                         ImgProcData[] imgProcseq, 
                                                         java.util.Map<String, String> __ctx, 
                                                         boolean __explicitCtx, 
                                                         boolean __synchronous, 
                                                         IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__sendStreamingVideoData_name, __cb);
        try
        {
            __result.prepare(__sendStreamingVideoData_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(botnum);
            ByteSeqHelper.write(__os, bytes);
            __os.writeInt(cameraID);
            __os.writeInt(numObjectsDetected);
            ImgProcDataSeqHelper.write(__os, imgProcseq);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_sendStreamingVideoData(Ice.AsyncResult __iresult)
    {
        __end(__iresult, __sendStreamingVideoData_name);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static SensorInterfacePrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), SensorInterfacePrx.class, SensorInterfacePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static SensorInterfacePrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), SensorInterfacePrx.class, SensorInterfacePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static SensorInterfacePrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), SensorInterfacePrx.class, SensorInterfacePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static SensorInterfacePrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), SensorInterfacePrx.class, SensorInterfacePrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static SensorInterfacePrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, SensorInterfacePrx.class, SensorInterfacePrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static SensorInterfacePrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, SensorInterfacePrx.class, SensorInterfacePrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::CommModule::SensorInterface",
        "::Ice::Object"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[0];
    }

    public static void __write(IceInternal.BasicStream __os, SensorInterfacePrx v)
    {
        __os.writeProxy(v);
    }

    public static SensorInterfacePrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            SensorInterfacePrxHelper result = new SensorInterfacePrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
