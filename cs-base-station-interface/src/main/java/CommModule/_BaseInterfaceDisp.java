// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `CommModule.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package CommModule;

public abstract class _BaseInterfaceDisp extends Ice.ObjectImpl implements BaseInterface
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::CommModule::BaseInterface",
        "::Ice::Object"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[0];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[0];
    }

    public static String ice_staticId()
    {
        return __ids[0];
    }

    public final void allOff()
    {
        allOff(null);
    }

    public final void init(String ip, String name, int port, int id)
    {
        init(ip, name, port, id, null);
    }

    public final void laserTagFire()
    {
        laserTagFire(null);
    }

    public final void laserTagShield()
    {
        laserTagShield(null);
    }

    public final void moveArm(String pos)
    {
        moveArm(pos, null);
    }

    public final void pokeBot(String baseIP)
    {
        pokeBot(baseIP, null);
    }

    public final void reload()
    {
        reload(null);
    }

    public final void requestImageProcessing()
    {
        requestImageProcessing(null);
    }

    public final void restartBot()
    {
        restartBot(null);
    }

    public final void sendControlInfo(int port, int on)
    {
        sendControlInfo(port, on, null);
    }

    public final void sendMovementData(int forward, int strafe, int rotate)
    {
        sendMovementData(forward, strafe, rotate, null);
    }

    public final void sendSteeringData(int direction)
    {
        sendSteeringData(direction, null);
    }

    public final void sendTurretData(int horizontal, int vertical)
    {
        sendTurretData(horizontal, vertical, null);
    }

    public final void setDuneBotMotorSpeeds(int frontLeft, int frontRight, int backRight, int backLeft)
    {
        setDuneBotMotorSpeeds(frontLeft, frontRight, backRight, backLeft, null);
    }

    public final void setMotorSpeeds(int frontLeft, int frontRight, int backLeft, int backRight)
    {
        setMotorSpeeds(frontLeft, frontRight, backLeft, backRight, null);
    }

    public final void shoot()
    {
        shoot(null);
    }

    public final void shutdownBot()
    {
        shutdownBot(null);
    }

    public static Ice.DispatchStatus ___sendMovementData(BaseInterface __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int forward;
        int strafe;
        int rotate;
        forward = __is.readInt();
        strafe = __is.readInt();
        rotate = __is.readInt();
        __inS.endReadParams();
        __obj.sendMovementData(forward, strafe, rotate, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___setMotorSpeeds(BaseInterface __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int frontLeft;
        int frontRight;
        int backLeft;
        int backRight;
        frontLeft = __is.readInt();
        frontRight = __is.readInt();
        backLeft = __is.readInt();
        backRight = __is.readInt();
        __inS.endReadParams();
        __obj.setMotorSpeeds(frontLeft, frontRight, backLeft, backRight, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___moveArm(BaseInterface __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String pos;
        pos = __is.readString();
        __inS.endReadParams();
        __obj.moveArm(pos, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___sendControlInfo(BaseInterface __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int port;
        int on;
        port = __is.readInt();
        on = __is.readInt();
        __inS.endReadParams();
        __obj.sendControlInfo(port, on, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___init(BaseInterface __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String ip;
        String name;
        int port;
        int id;
        ip = __is.readString();
        name = __is.readString();
        port = __is.readInt();
        id = __is.readInt();
        __inS.endReadParams();
        __obj.init(ip, name, port, id, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___pokeBot(BaseInterface __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String baseIP;
        baseIP = __is.readString();
        __inS.endReadParams();
        __obj.pokeBot(baseIP, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___shoot(BaseInterface __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        __obj.shoot(__current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___reload(BaseInterface __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        __obj.reload(__current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___allOff(BaseInterface __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        __obj.allOff(__current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___laserTagFire(BaseInterface __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        __obj.laserTagFire(__current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___laserTagShield(BaseInterface __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        __obj.laserTagShield(__current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___sendSteeringData(BaseInterface __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int direction;
        direction = __is.readInt();
        __inS.endReadParams();
        __obj.sendSteeringData(direction, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___sendTurretData(BaseInterface __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int horizontal;
        int vertical;
        horizontal = __is.readInt();
        vertical = __is.readInt();
        __inS.endReadParams();
        __obj.sendTurretData(horizontal, vertical, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___setDuneBotMotorSpeeds(BaseInterface __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int frontLeft;
        int frontRight;
        int backRight;
        int backLeft;
        frontLeft = __is.readInt();
        frontRight = __is.readInt();
        backRight = __is.readInt();
        backLeft = __is.readInt();
        __inS.endReadParams();
        __obj.setDuneBotMotorSpeeds(frontLeft, frontRight, backRight, backLeft, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___requestImageProcessing(BaseInterface __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        __obj.requestImageProcessing(__current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___restartBot(BaseInterface __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        __obj.restartBot(__current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___shutdownBot(BaseInterface __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        __obj.shutdownBot(__current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    private final static String[] __all =
    {
        "allOff",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "init",
        "laserTagFire",
        "laserTagShield",
        "moveArm",
        "pokeBot",
        "reload",
        "requestImageProcessing",
        "restartBot",
        "sendControlInfo",
        "sendMovementData",
        "sendSteeringData",
        "sendTurretData",
        "setDuneBotMotorSpeeds",
        "setMotorSpeeds",
        "shoot",
        "shutdownBot"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___allOff(this, in, __current);
            }
            case 1:
            {
                return ___ice_id(this, in, __current);
            }
            case 2:
            {
                return ___ice_ids(this, in, __current);
            }
            case 3:
            {
                return ___ice_isA(this, in, __current);
            }
            case 4:
            {
                return ___ice_ping(this, in, __current);
            }
            case 5:
            {
                return ___init(this, in, __current);
            }
            case 6:
            {
                return ___laserTagFire(this, in, __current);
            }
            case 7:
            {
                return ___laserTagShield(this, in, __current);
            }
            case 8:
            {
                return ___moveArm(this, in, __current);
            }
            case 9:
            {
                return ___pokeBot(this, in, __current);
            }
            case 10:
            {
                return ___reload(this, in, __current);
            }
            case 11:
            {
                return ___requestImageProcessing(this, in, __current);
            }
            case 12:
            {
                return ___restartBot(this, in, __current);
            }
            case 13:
            {
                return ___sendControlInfo(this, in, __current);
            }
            case 14:
            {
                return ___sendMovementData(this, in, __current);
            }
            case 15:
            {
                return ___sendSteeringData(this, in, __current);
            }
            case 16:
            {
                return ___sendTurretData(this, in, __current);
            }
            case 17:
            {
                return ___setDuneBotMotorSpeeds(this, in, __current);
            }
            case 18:
            {
                return ___setMotorSpeeds(this, in, __current);
            }
            case 19:
            {
                return ___shoot(this, in, __current);
            }
            case 20:
            {
                return ___shutdownBot(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
