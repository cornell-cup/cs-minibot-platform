// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `VisionModule.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package VisionModule;

public class Blob implements java.lang.Cloneable, java.io.Serializable
{
    public double x;

    public double y;

    public int isProjectile;

    public ColorRGB color1;

    public ColorRGB color2;

    public double orientation;

    public double velocityx;

    public double velocityy;

    public double velocityRot;

    public int botID;

    public double time;

    public Blob()
    {
        color1 = new ColorRGB();
        color2 = new ColorRGB();
    }

    public Blob(double x, double y, int isProjectile, ColorRGB color1, ColorRGB color2, double orientation, double velocityx, double velocityy, double velocityRot, int botID, double time)
    {
        this.x = x;
        this.y = y;
        this.isProjectile = isProjectile;
        this.color1 = color1;
        this.color2 = color2;
        this.orientation = orientation;
        this.velocityx = velocityx;
        this.velocityy = velocityy;
        this.velocityRot = velocityRot;
        this.botID = botID;
        this.time = time;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        Blob _r = null;
        if(rhs instanceof Blob)
        {
            _r = (Blob)rhs;
        }

        if(_r != null)
        {
            if(x != _r.x)
            {
                return false;
            }
            if(y != _r.y)
            {
                return false;
            }
            if(isProjectile != _r.isProjectile)
            {
                return false;
            }
            if(color1 != _r.color1)
            {
                if(color1 == null || _r.color1 == null || !color1.equals(_r.color1))
                {
                    return false;
                }
            }
            if(color2 != _r.color2)
            {
                if(color2 == null || _r.color2 == null || !color2.equals(_r.color2))
                {
                    return false;
                }
            }
            if(orientation != _r.orientation)
            {
                return false;
            }
            if(velocityx != _r.velocityx)
            {
                return false;
            }
            if(velocityy != _r.velocityy)
            {
                return false;
            }
            if(velocityRot != _r.velocityRot)
            {
                return false;
            }
            if(botID != _r.botID)
            {
                return false;
            }
            if(time != _r.time)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::VisionModule::Blob");
        __h = IceInternal.HashUtil.hashAdd(__h, x);
        __h = IceInternal.HashUtil.hashAdd(__h, y);
        __h = IceInternal.HashUtil.hashAdd(__h, isProjectile);
        __h = IceInternal.HashUtil.hashAdd(__h, color1);
        __h = IceInternal.HashUtil.hashAdd(__h, color2);
        __h = IceInternal.HashUtil.hashAdd(__h, orientation);
        __h = IceInternal.HashUtil.hashAdd(__h, velocityx);
        __h = IceInternal.HashUtil.hashAdd(__h, velocityy);
        __h = IceInternal.HashUtil.hashAdd(__h, velocityRot);
        __h = IceInternal.HashUtil.hashAdd(__h, botID);
        __h = IceInternal.HashUtil.hashAdd(__h, time);
        return __h;
    }

    public Blob
    clone()
    {
        Blob c = null;
        try
        {
            c = (Blob)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeDouble(x);
        __os.writeDouble(y);
        __os.writeInt(isProjectile);
        ColorRGB.__write(__os, color1);
        ColorRGB.__write(__os, color2);
        __os.writeDouble(orientation);
        __os.writeDouble(velocityx);
        __os.writeDouble(velocityy);
        __os.writeDouble(velocityRot);
        __os.writeInt(botID);
        __os.writeDouble(time);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        x = __is.readDouble();
        y = __is.readDouble();
        isProjectile = __is.readInt();
        color1 = ColorRGB.__read(__is, color1);
        color2 = ColorRGB.__read(__is, color2);
        orientation = __is.readDouble();
        velocityx = __is.readDouble();
        velocityy = __is.readDouble();
        velocityRot = __is.readDouble();
        botID = __is.readInt();
        time = __is.readDouble();
    }

    static public void
    __write(IceInternal.BasicStream __os, Blob __v)
    {
        if(__v == null)
        {
            __nullMarshalValue.__write(__os);
        }
        else
        {
            __v.__write(__os);
        }
    }

    static public Blob
    __read(IceInternal.BasicStream __is, Blob __v)
    {
        if(__v == null)
        {
             __v = new Blob();
        }
        __v.__read(__is);
        return __v;
    }
    
    private static final Blob __nullMarshalValue = new Blob();

    public static final long serialVersionUID = -774609420L;
}
