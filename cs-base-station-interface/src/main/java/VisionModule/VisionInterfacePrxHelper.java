// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `VisionModule.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package VisionModule;

/**
 * Provides type-specific helper functions.
 **/
public final class VisionInterfacePrxHelper extends Ice.ObjectPrxHelperBase implements VisionInterfacePrx
{
    private static final String __getVision_name = "getVision";

    public Blob[] getVision()
    {
        return getVision(null, false);
    }

    public Blob[] getVision(java.util.Map<String, String> __ctx)
    {
        return getVision(__ctx, true);
    }

    private Blob[] getVision(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getVision_name);
        return end_getVision(begin_getVision(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getVision()
    {
        return begin_getVision(null, false, false, null);
    }

    public Ice.AsyncResult begin_getVision(java.util.Map<String, String> __ctx)
    {
        return begin_getVision(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getVision(Ice.Callback __cb)
    {
        return begin_getVision(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getVision(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getVision(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getVision(Callback_VisionInterface_getVision __cb)
    {
        return begin_getVision(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getVision(java.util.Map<String, String> __ctx, Callback_VisionInterface_getVision __cb)
    {
        return begin_getVision(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getVision(IceInternal.Functional_GenericCallback1<Blob[]> __responseCb,
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getVision(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getVision(IceInternal.Functional_GenericCallback1<Blob[]> __responseCb,
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getVision(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getVision(java.util.Map<String, String> __ctx,
                                           IceInternal.Functional_GenericCallback1<Blob[]> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getVision(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getVision(java.util.Map<String, String> __ctx,
                                           IceInternal.Functional_GenericCallback1<Blob[]> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getVision(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getVision(java.util.Map<String, String> __ctx, 
                                            boolean __explicitCtx, 
                                            boolean __synchronous, 
                                            IceInternal.Functional_GenericCallback1<Blob[]> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getVision(__ctx, __explicitCtx, __synchronous, 
                               new IceInternal.Functional_TwowayCallbackArg1<Blob[]>(__responseCb, __exceptionCb, __sentCb)
                                   {
                                       public final void __completed(Ice.AsyncResult __result)
                                       {
                                           VisionInterfacePrxHelper.__getVision_completed(this, __result);
                                       }
                                   });
    }

    private Ice.AsyncResult begin_getVision(java.util.Map<String, String> __ctx, 
                                            boolean __explicitCtx, 
                                            boolean __synchronous, 
                                            IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getVision_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getVision_name, __cb);
        try
        {
            __result.prepare(__getVision_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public Blob[] end_getVision(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getVision_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            Blob[] __ret;
            __ret = VisionDataHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getVision_completed(Ice.TwowayCallbackArg1<Blob[]> __cb, Ice.AsyncResult __result)
    {
        VisionInterfacePrx __proxy = (VisionInterfacePrx)__result.getProxy();
        Blob[] __ret = null;
        try
        {
            __ret = __proxy.end_getVision(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __ping_name = "ping";

    public double ping(double a, double b, double c, double d, double e, double f, double g, double h, double i, double j, double k, double l)
    {
        return ping(a, b, c, d, e, f, g, h, i, j, k, l, null, false);
    }

    public double ping(double a, double b, double c, double d, double e, double f, double g, double h, double i, double j, double k, double l, java.util.Map<String, String> __ctx)
    {
        return ping(a, b, c, d, e, f, g, h, i, j, k, l, __ctx, true);
    }

    private double ping(double a, double b, double c, double d, double e, double f, double g, double h, double i, double j, double k, double l, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__ping_name);
        return end_ping(begin_ping(a, b, c, d, e, f, g, h, i, j, k, l, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_ping(double a, double b, double c, double d, double e, double f, double g, double h, double i, double j, double k, double l)
    {
        return begin_ping(a, b, c, d, e, f, g, h, i, j, k, l, null, false, false, null);
    }

    public Ice.AsyncResult begin_ping(double a, double b, double c, double d, double e, double f, double g, double h, double i, double j, double k, double l, java.util.Map<String, String> __ctx)
    {
        return begin_ping(a, b, c, d, e, f, g, h, i, j, k, l, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_ping(double a, double b, double c, double d, double e, double f, double g, double h, double i, double j, double k, double l, Ice.Callback __cb)
    {
        return begin_ping(a, b, c, d, e, f, g, h, i, j, k, l, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_ping(double a, double b, double c, double d, double e, double f, double g, double h, double i, double j, double k, double l, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_ping(a, b, c, d, e, f, g, h, i, j, k, l, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_ping(double a, double b, double c, double d, double e, double f, double g, double h, double i, double j, double k, double l, Callback_VisionInterface_ping __cb)
    {
        return begin_ping(a, b, c, d, e, f, g, h, i, j, k, l, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_ping(double a, double b, double c, double d, double e, double f, double g, double h, double i, double j, double k, double l, java.util.Map<String, String> __ctx, Callback_VisionInterface_ping __cb)
    {
        return begin_ping(a, b, c, d, e, f, g, h, i, j, k, l, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_ping(double a,
                                      double b, 
                                      double c, 
                                      double d, 
                                      double e, 
                                      double f, 
                                      double g, 
                                      double h, 
                                      double i, 
                                      double j, 
                                      double k, 
                                      double l, 
                                      IceInternal.Functional_DoubleCallback __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_ping(a, b, c, d, e, f, g, h, i, j, k, l, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_ping(double a,
                                      double b, 
                                      double c, 
                                      double d, 
                                      double e, 
                                      double f, 
                                      double g, 
                                      double h, 
                                      double i, 
                                      double j, 
                                      double k, 
                                      double l, 
                                      IceInternal.Functional_DoubleCallback __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_ping(a, b, c, d, e, f, g, h, i, j, k, l, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_ping(double a,
                                      double b, 
                                      double c, 
                                      double d, 
                                      double e, 
                                      double f, 
                                      double g, 
                                      double h, 
                                      double i, 
                                      double j, 
                                      double k, 
                                      double l, 
                                      java.util.Map<String, String> __ctx, 
                                      IceInternal.Functional_DoubleCallback __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_ping(a, b, c, d, e, f, g, h, i, j, k, l, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_ping(double a,
                                      double b, 
                                      double c, 
                                      double d, 
                                      double e, 
                                      double f, 
                                      double g, 
                                      double h, 
                                      double i, 
                                      double j, 
                                      double k, 
                                      double l, 
                                      java.util.Map<String, String> __ctx, 
                                      IceInternal.Functional_DoubleCallback __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_ping(a, b, c, d, e, f, g, h, i, j, k, l, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_ping(double a, 
                                       double b, 
                                       double c, 
                                       double d, 
                                       double e, 
                                       double f, 
                                       double g, 
                                       double h, 
                                       double i, 
                                       double j, 
                                       double k, 
                                       double l, 
                                       java.util.Map<String, String> __ctx, 
                                       boolean __explicitCtx, 
                                       boolean __synchronous, 
                                       IceInternal.Functional_DoubleCallback __responseCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_ping(a, b, c, d, e, f, g, h, i, j, k, l, __ctx, __explicitCtx, __synchronous, 
                          new IceInternal.Functional_TwowayCallbackDouble(__responseCb, __exceptionCb, __sentCb)
                              {
                                  public final void __completed(Ice.AsyncResult __result)
                                  {
                                      VisionInterfacePrxHelper.__ping_completed(this, __result);
                                  }
                              });
    }

    private Ice.AsyncResult begin_ping(double a, 
                                       double b, 
                                       double c, 
                                       double d, 
                                       double e, 
                                       double f, 
                                       double g, 
                                       double h, 
                                       double i, 
                                       double j, 
                                       double k, 
                                       double l, 
                                       java.util.Map<String, String> __ctx, 
                                       boolean __explicitCtx, 
                                       boolean __synchronous, 
                                       IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__ping_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__ping_name, __cb);
        try
        {
            __result.prepare(__ping_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeDouble(a);
            __os.writeDouble(b);
            __os.writeDouble(c);
            __os.writeDouble(d);
            __os.writeDouble(e);
            __os.writeDouble(f);
            __os.writeDouble(g);
            __os.writeDouble(h);
            __os.writeDouble(i);
            __os.writeDouble(j);
            __os.writeDouble(k);
            __os.writeDouble(l);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public double end_ping(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __ping_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            double __ret;
            __ret = __is.readDouble();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __ping_completed(Ice.TwowayCallbackDouble __cb, Ice.AsyncResult __result)
    {
        VisionInterfacePrx __proxy = (VisionInterfacePrx)__result.getProxy();
        double __ret = 0.0;
        try
        {
            __ret = __proxy.end_ping(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static VisionInterfacePrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), VisionInterfacePrx.class, VisionInterfacePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static VisionInterfacePrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), VisionInterfacePrx.class, VisionInterfacePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static VisionInterfacePrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), VisionInterfacePrx.class, VisionInterfacePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static VisionInterfacePrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), VisionInterfacePrx.class, VisionInterfacePrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static VisionInterfacePrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, VisionInterfacePrx.class, VisionInterfacePrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static VisionInterfacePrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, VisionInterfacePrx.class, VisionInterfacePrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::VisionModule::VisionInterface"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[1];
    }

    public static void __write(IceInternal.BasicStream __os, VisionInterfacePrx v)
    {
        __os.writeProxy(v);
    }

    public static VisionInterfacePrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            VisionInterfacePrxHelper result = new VisionInterfacePrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
